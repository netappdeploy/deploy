---
# tasks file for na-ontap-vserver-create
- name: Create Vserver
  na_ontap_svm:
    state: present
    name: '{{ item.name }}'
    allowed_protocols: '{{ item.protocol.lower() | default(omit) }}'
    root_volume: "{{ item.root_volume | default(item.name + '_root') }}"
    root_volume_aggregate: '{{ item.root_volume_aggregate }}'
    root_volume_security_style: '{{ item.root_volume_security_style }}'
    aggr_list: '{{ item.aggr_list | default(omit) }}'
    language: "{{ (item.language.lower() | replace('-','_')) if item.language is defined else omit }}"
    hostname: '{{ hostname }}'
    username: '{{ username }}'
    password: '{{ password }}'
    ontapi: '{{ ontap_facts.ontap_version }}'
    https: true
    validate_certs: false
  with_items: '{{ Data_SVMs }}'
# - name: Validate destination FlexVol
#   na_ontap_volume:
#     state: present
#     name: '{{ item.1.source }}_m{{ item.0 + 1 }}'
#     aggregate_name: '{{ item.1.destination }}'
#     size: 20
#     size_unit: mb
#     type: DP
#     vserver: '{{ item.1.vserver }}'
#     hostname: '{{ hostname }}'
#     username: '{{ username }}'
#     password: '{{ password }}'
#     ontapi: '{{ ontap_facts.ontap_version }}'
#     https: true
#     validate_certs: false
#   with_indexed_items: '{{ SVMLSMirrors }}'
#   when: SVMLSMirrors is defined and SVMLSMirrors != None
# - name: Create SnapMirror
#   na_ontap_snapmirror:
#     state: present
#     source_path: '{{ cluster_name }}://{{ item.1.vserver }}/{{ item.1.source }}'
#     source_vserver: '{{ item.1.vserver }}'
#     source_volume: '{{ item.1.source }}'
#     destination_path: '{{ cluster_name }}://{{ item.1.vserver }}/{{ item.1.source }}_m{{ item.0 + 1 }}'
#     destination_vserver: '{{ item.1.vserver }}'
#     destination_volume: '{{ item.1.source }}_m{{ item.0 + 1 }}'
#     relationship_type: load_sharing
#     schedule: '{{ item.1.schedule }}'
#     hostname: '{{ hostname }}'
#     username: '{{ username }}'
#     password: '{{ password }}'
#     ontapi: '{{ ontap_facts.ontap_version }}'
#     https: true
#     validate_certs: false
#   with_indexed_items: '{{ SVMLSMirrors }}'
#   when: SVMLSMirrors is defined and SVMLSMirrors != None
- name: Setup FCP
  na_ontap_fcp:
    state: present
    status: up
    vserver: '{{ item.name }}'
    hostname: '{{ hostname }}'
    username: '{{ username }}'
    password: '{{ password }}'
    ontapi: '{{ ontap_facts.ontap_version }}'
    https: true
    validate_certs: false
  with_items: '{{ Data_SVMs }}'
  when: item.protocol.lower() is search("fcp")
- name: Setup iSCSI
  na_ontap_iscsi:
    state: present
    service_state: started
    vserver: '{{ item.name }}'
    hostname: '{{ hostname }}'
    username: '{{ username }}'
    password: '{{ password }}'
    ontapi: '{{ ontap_facts.ontap_version }}'
    https: true
    validate_certs: false
  with_items: '{{ Data_SVMs }}'
  when: item.protocol.lower() is search("iscsi")
- name: Create Interface
  na_ontap_interface:
    state: present
    interface_name: '{{ item.interface_name }}'
    home_port: '{{ item.home_port }}'
    home_node: '{{ item.home_node }}'
    role: '{{ item.role }}'
    protocols: '{{ item.protocol }}'
    admin_status: up
    failover_policy: '{{ item.failover_policy }}'
    firewall_policy: "{{ item.firewall_policy | default('data') }}"
    is_auto_revert: '{{ item.is_auto_revert }}'
    address: '{{ item.address | default(omit) }}'
    netmask: '{{ item.netmask | default(omit) }}'
    vserver: '{{ item.vserver }}'
    hostname: '{{ hostname }}'
    username: '{{ username }}'
    password: '{{ password }}'
    ontapi: '{{ ontap_facts.ontap_version }}'
    https: true
    validate_certs: false
  with_items: '{{ Network_Interface_SVM_LIF_Setup }}'
- name: Create DNS
  na_ontap_dns:
    state: present
    vserver: '{{ item.vserver }}'
    domains: '{{ item.domains }}'
    nameservers: '{{ item.nameservers }}'
    hostname: '{{ hostname }}'
    username: '{{ username }}'
    password: '{{ password }}'
    ontapi: '{{ ontap_facts.ontap_version }}'
    https: true
    validate_certs: false
    skip_validation: true
  with_items: '{{ Configure_DNS_for_SVM }}'
  when: Configure_DNS_for_SVM is defined and Configure_DNS_for_SVM != None
- name: Create CIFS Server
  na_ontap_cifs_server:
    state: present
    vserver: '{{ item.vserver }}'
    domain: '{{ item.domain }}'
    cifs_server_name: '{{ item.cifs_server_name }}'
    force: "{{ item.force | default('false') }}"
    admin_password: '{{ admin_password }}'
    admin_user_name: '{{ admin_user_name }}'
    ou: '{{ item.ou | default(omit)}}'
    service_state: started
    hostname: '{{ hostname }}'
    username: '{{ username }}'
    password: '{{ password }}'
    ontapi: '{{ ontap_facts.ontap_version }}'
    https: true
    validate_certs: false
  with_items: '{{ CIFS_Server_Create }}'
  when: CIFS_Server_Create is defined and CIFS_Server_Create != None
- name: Create NFS Server
  na_ontap_nfs:
    state: present
    service_state: started
    vserver: '{{ item.vserver }}'
    nfsv3: enabled
    nfsv4: disabled
    nfsv41: disabled
    tcp: enabled
    udp: enabled
    vstorage_state: disabled
    hostname: '{{ hostname }}'
    username: '{{ username }}'
    password: '{{ password }}'
    ontapi: '{{ ontap_facts.ontap_version }}'
    https: true
    validate_certs: false
  with_items: '{{ NFS_Server_Create }}'
  when: NFS_Server_Create is defined and NFS_Server_Create != None
- name: Setup default export rules
  na_ontap_export_policy_rule:
    state: present
    policy_name: default
    vserver: '{{ item.vserver }}'
    client_match: 0.0.0.0/0
    ro_rule: any
    rw_rule: none
    protocol: any
    hostname: '{{ hostname }}'
    username: '{{ username }}'
    password: '{{ password }}'
    ontapi: '{{ ontap_facts.ontap_version }}'
    https: true
    validate_certs: false
  with_items: '{{ Data_SVMs }}'
  when: item.protocol.lower() is search("nfs") and (NFS_Exports is not defined or NFS_Exports == None)
